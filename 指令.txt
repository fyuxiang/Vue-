用法：
new Vue({
  el:"#id",//id选择器，为vue实例的挂载目标
  data:{},//components中这里只能用对象的属性简写方式data(){return {}}
  methods:{},//方法属性，与computed的区别在于，computed依赖于缓存，而methods只要在生命周期内发生了更新就运行，其被依赖的属性必须挂载在this上
  computed:{
    computedOne:{//可设置访问其属性
      get:function(){},
      set func(){}
    }
  },//计算属性
  watch:{
    props:function([newValue[,oldValue]]){}//监听属性也可以通过this.$watch来调用这个方法
  },
  beforeCreat:function(){
    //此时已经new了，但是还没有完成this实例的初始化，获取不到this.$data,但是可以通过this.$options.data()来获取，
  },
  created:function(){
    //new 实例已经完成，已经把data属性配置到this，可以获取到this.$data,但还获取不到el对象，即挂载对象
  },
  beforeMount(){
    //el对象可以获取到，但是此时是dom树还没被vue解析完成，Vnode还没有生成；
  },
  mounted(){
    //此时可以获取到渲染后的dom节点
  },
  beforeUpdate(){},
  updated(){},
  beforeDestroy(){},
  destroyed(){}
});
/*********************************************************************指令**************************************************************/
{{}}
插值符号，可插入变量属性，也可插入js表达式；
v-html
文本插入，可变量，可表达式
v-bind:attr="{'attrName':表达式}" 缩写 :attr=""
节点属性绑定，可变量，可表达式
v-if="" v-else v-else-if
根据引号内的值来判断是否解析dom节点
v-show=""   true/false
样式display的样式切换
v-on:click=""  缩写@click=""
时间监听，函数内的this指向vue实例
v-model=""
双向绑定，会监听输入框的input事件，此处个人感觉是用了函数节流的方法
过滤器   |
{{el | }}
需要定义filters属性，filter函数可以传递参数，|之前的值默认作为右侧的第一个参数，filter（arg1，arg2），其中分别作为第二个参数，
原理是Thunk函数，可以链式表达
v-for="(item,key,index) in items"
items可以为Array，Object，Number等数据类型，
v-bind:class=""
可以是数组[classA,classB]，也可以是对象{'classA':true/false}，也可以是方法返回的对象return {'classA':true/false}
v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"
也可以是对象或者是数组，或return的一个对象























